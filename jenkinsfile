pipeline {
    agent { label 'Agent1' }

    environment {
        GIT_REPO = 'https://github.com/vasavit07/devops-project1.git'
        BRANCH = 'main'
        IMAGE_NAME = 'my-tomcat-app'
        CONTAINER_NAME = 'my-tomcat-app-container'
        HOST_PORT = '8888'
        CONTAINER_PORT = '8080'
        DOCKER_REGISTRY = 'docker.io/dockeradmin84'
        K8S_DEPLOYMENT_NAME = 'abcapp1'
        WORK_DIR = "${WORKSPACE}"
    }

    stages {
        stage('Clone Source Code') {
            steps {
                git url: "${GIT_REPO}", branch: "${BRANCH}"
            }
        }

        stage('Build WAR') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                    echo "Building Docker image..."
                    docker build -t $IMAGE_NAME .
                '''
            }
        }

        stage('Tag & Push Docker Image') {
            steps {
                withCredentials([
                    usernamePassword(
                        credentialsId: 'DOCKERHUB_CREDS', 
                        usernameVariable: 'DOCKER_USERNAME', 
                        passwordVariable: 'DOCKER_PASSWORD'
                    )
                ]) {
                    sh '''
                        echo "Tagging Docker image..."
                        docker tag $IMAGE_NAME $DOCKER_REGISTRY/$IMAGE_NAME:latest

                        echo "Logging into Docker Hub..."
                        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

                        echo "Pushing image..."
                        docker push $DOCKER_REGISTRY/$IMAGE_NAME:latest
                    '''
                }
            }
        }

        stage('Deploy Container (Local Docker)') {
            steps {
                sh '''
                    echo "Stopping old container if running..."
                    docker rm -f $CONTAINER_NAME || true

                    echo "Starting new container..."
                    docker run -d --name $CONTAINER_NAME -p $HOST_PORT:$CONTAINER_PORT $IMAGE_NAME
                '''
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh '''
                        echo "Deploying to Kubernetes..."

                        kubectl config use-context kubernetes-admin@kubernetes

                        kubectl delete deployment $K8S_DEPLOYMENT_NAME --ignore-not-found

                        kubectl create deployment $K8S_DEPLOYMENT_NAME --image=$DOCKER_REGISTRY/$IMAGE_NAME:latest

                        if [ -f "$WORK_DIR/app.yml" ]; then
                            echo "Applying custom app.yml..."
                            kubectl apply -f $WORK_DIR/app.yml
                        else
                            echo "⚠️ No custom app.yml found. Skipping apply step."
                        fi
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "✅ Deployment completed. Access your app at: http://98.80.10.185:$HOST_PORT/app"
        }
        failure {
            echo "❌ Pipeline failed. Please check the logs above."
        }
    }
}

